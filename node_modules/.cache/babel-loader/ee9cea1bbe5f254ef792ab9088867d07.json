{"ast":null,"code":"import _slicedToArray from \"/Users/simonfauvre/Documents/GitHub/P7/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/simonfauvre/Documents/GitHub/P7/src/components/Map.js\";\nimport React, { useState, useContext } from 'react';\nimport '../style/App.css';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport mapStyle from \"../style/mapStyle.js\";\nimport useGeolocation from \"react-hook-geolocation\";\nimport RestaurantContext from \"./RestaurantContext\";\n\nconst Map = props => {\n  const _useContext = useContext(RestaurantContext),\n        restaurants = _useContext.restaurants,\n        updateRestaurants = _useContext.updateRestaurants;\n\n  const _useState = useState(props.restaurants),\n        _useState2 = _slicedToArray(_useState, 2),\n        restaurantDisplay = _useState2[0],\n        setRestaurantDisplay = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedRestaurant = _useState4[0],\n        setSelectedRestaurant = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selectedLocation = _useState6[0],\n        setSelectedLocation = _useState6[1];\n\n  const location = useGeolocation();\n  let center = {\n    lat: location.latitude,\n    lng: location.longitude\n  }; // if (selectedRestaurant !== null) {\n  //   center = {lat: selectedRestaurant.lat, lng: selectedRestaurant.long};\n  // } else if (selectedLocation !== null) {\n  //   center = {lat: selectedLocation.latitude, lng: selectedLocation.longitude};\n  // } else if (selectedRestaurant === null || selectedLocation === null){\n  //   // Modifier pour ne plus centrer la carte sur un point prÃ©cis\n  // }\n\n  const clickRestaurant = restaurant => {\n    //console.log(restaurant);\n    console.log(restaurants);\n    restaurants.filter(feature => feature.restaurantID === restaurant.restaurantID);\n    console.log(restaurant.displayDetails = true);\n  };\n\n  return React.createElement(GoogleMap, {\n    defaultZoom: 13,\n    defaultCenter: {\n      lat: 45.764042,\n      lng: 4.835659\n    },\n    center: center,\n    defaultOptions: {\n      styles: mapStyle,\n      disableDefaultUI: true,\n      zoomControl: true,\n      zoomControlOptions: {\n        style: window.google.maps.ZoomControlStyle.SMALL\n      },\n      mapTypeControl: true,\n      mapTypeControlOptions: {\n        style: window.google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n        position: window.google.maps.ControlPosition.TOP_RIGHT\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Marker, {\n    position: {\n      lat: parseFloat(location.latitude),\n      lng: parseFloat(location.longitude)\n    },\n    onClick: () => {\n      setSelectedLocation(location);\n      setSelectedRestaurant(null);\n    },\n    icon: {\n      url: \"/here.png\",\n      scaledSize: new window.google.maps.Size(20, 20)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), selectedLocation && React.createElement(InfoWindow, {\n    position: {\n      lat: parseFloat(selectedLocation.latitude),\n      lng: parseFloat(selectedLocation.longitude)\n    },\n    options: {\n      pixelOffset: new window.google.maps.Size(0, -20)\n    },\n    onCloseClick: () => {\n      setSelectedLocation(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      fontSize: \"14px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Vous \\xEAtes ici\"))), restaurantDisplay.default.features.filter(feature => feature.display !== true).map(restaurant => React.createElement(Marker, {\n    key: restaurant.restaurantID,\n    position: {\n      lat: restaurant.lat,\n      lng: restaurant.long\n    },\n    onClick: () => {\n      setSelectedRestaurant(restaurant);\n      setSelectedLocation(null);\n      clickRestaurant(restaurant);\n    },\n    icon: {\n      url: \"/logo_resto.png\",\n      scaledSize: new window.google.maps.Size(30, 30)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), selectedRestaurant && React.createElement(InfoWindow, {\n    position: {\n      lat: selectedRestaurant.lat,\n      lng: selectedRestaurant.long\n    },\n    onCloseClick: () => {\n      setSelectedRestaurant(null);\n      setSelectedLocation(null);\n    },\n    options: {\n      pixelOffset: new window.google.maps.Size(0, -30)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      fontSize: 14\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, selectedRestaurant.restaurantName))));\n};\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;","map":{"version":3,"sources":["/Users/simonfauvre/Documents/GitHub/P7/src/components/Map.js"],"names":["React","useState","useContext","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","mapStyle","useGeolocation","RestaurantContext","Map","props","restaurants","updateRestaurants","restaurantDisplay","setRestaurantDisplay","selectedRestaurant","setSelectedRestaurant","selectedLocation","setSelectedLocation","location","center","lat","latitude","lng","longitude","clickRestaurant","restaurant","console","log","filter","feature","restaurantID","displayDetails","styles","disableDefaultUI","zoomControl","zoomControlOptions","style","window","google","maps","ZoomControlStyle","SMALL","mapTypeControl","mapTypeControlOptions","MapTypeControlStyle","DROPDOWN_MENU","position","ControlPosition","TOP_RIGHT","parseFloat","url","scaledSize","Size","pixelOffset","fontSize","default","features","display","map","long","restaurantName","WrappedMap"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react';\nimport '../style/App.css';\nimport {GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow} from 'react-google-maps';\nimport mapStyle from \"../style/mapStyle.js\";\nimport useGeolocation from \"react-hook-geolocation\";\nimport RestaurantContext from \"./RestaurantContext\";\n\nconst Map = props => {\n\n    const {restaurants, updateRestaurants} = useContext(RestaurantContext);\n    const [restaurantDisplay, setRestaurantDisplay] = useState(props.restaurants);\n    const [selectedRestaurant, setSelectedRestaurant] = useState(null);\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const location = useGeolocation();\n    let center = {lat: location.latitude, lng: location.longitude};\n  \n    // if (selectedRestaurant !== null) {\n    //   center = {lat: selectedRestaurant.lat, lng: selectedRestaurant.long};\n    // } else if (selectedLocation !== null) {\n    //   center = {lat: selectedLocation.latitude, lng: selectedLocation.longitude};\n    // } else if (selectedRestaurant === null || selectedLocation === null){\n    //   // Modifier pour ne plus centrer la carte sur un point prÃ©cis\n    // }\n  \n    const clickRestaurant = (restaurant) => {\n        //console.log(restaurant);\n        console.log(restaurants);\n        restaurants.filter(feature => feature.restaurantID === restaurant.restaurantID)\n        console.log(restaurant.displayDetails = true);\n    }\n  \n    return (\n      <GoogleMap \n        defaultZoom={13} \n        defaultCenter={{ lat: 45.764042, lng: 4.835659 }}\n        center={center}\n        defaultOptions={{\n          styles: mapStyle, \n          disableDefaultUI: true, \n          zoomControl: true, \n          zoomControlOptions: {\n            style: window.google.maps.ZoomControlStyle.SMALL,\n          },\n          mapTypeControl: true,\n          mapTypeControlOptions: {\n            style: window.google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n            position: window.google.maps.ControlPosition.TOP_RIGHT\n          }\n        }}>\n        <Marker\n          position={{lat: parseFloat(location.latitude), lng: parseFloat(location.longitude)}}\n          onClick={() => {\n            setSelectedLocation(location);\n            setSelectedRestaurant(null);\n          }}\n          icon={{\n            url: \"/here.png\",\n            scaledSize: new window.google.maps.Size(20, 20)\n          }}/>\n  \n        {selectedLocation && (\n        <InfoWindow \n          position={{lat: parseFloat(selectedLocation.latitude), lng: parseFloat(selectedLocation.longitude)}}\n          options={{pixelOffset: new window.google.maps.Size(0, -20)}}\n          onCloseClick={() => {\n            setSelectedLocation(null);\n          }}>\n          <div>\n            <h2 style={{fontSize: \"14px\"}}>Vous Ãªtes ici</h2>\n          </div>\n        </InfoWindow>\n        )}\n\n        {restaurantDisplay.default.features.filter(feature => feature.display !== true).map(restaurant => (\n          <Marker \n            key={restaurant.restaurantID}\n            position={{lat: restaurant.lat, lng: restaurant.long}}\n            onClick={() => {\n              setSelectedRestaurant(restaurant);\n              setSelectedLocation(null);\n              clickRestaurant(restaurant);\n            }}\n            icon={{\n              url: \"/logo_resto.png\",\n              scaledSize: new window.google.maps.Size(30, 30)\n            }}/>\n        ))}\n  \n        {selectedRestaurant && (\n          <InfoWindow \n            position={{lat: selectedRestaurant.lat, lng: selectedRestaurant.long}}\n            onCloseClick={() => {\n              setSelectedRestaurant(null);\n              setSelectedLocation(null);\n            }}\n            options={{pixelOffset: new window.google.maps.Size(0, -30)}}>\n            <div>\n              <h2 style={{fontSize: 14}}>{selectedRestaurant.restaurantName}</h2>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    );\n}\n  \nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;"]},"metadata":{},"sourceType":"module"}