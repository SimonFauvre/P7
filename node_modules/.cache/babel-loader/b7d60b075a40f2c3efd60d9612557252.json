{"ast":null,"code":"import _slicedToArray from \"/Users/simonfauvre/Documents/GitHub/P7/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\n\nconst useGeolocation = ({\n  enableHighAccuracy,\n  maximumAge,\n  timeout\n} = {}, callback) => {\n  const _useState = useState({\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: null,\n    error: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        coordinates = _useState2[0],\n        setCoordinates = _useState2[1];\n\n  useEffect(() => {\n    let didCancel;\n\n    const updateCoordinates = ({\n      coords = {},\n      timestamp\n    }) => {\n      const accuracy = coords.accuracy,\n            altitude = coords.altitude,\n            altitudeAccuracy = coords.altitudeAccuracy,\n            heading = coords.heading,\n            latitude = coords.latitude,\n            longitude = coords.longitude,\n            speed = coords.speed;\n\n      if (!didCancel) {\n        setCoordinates({\n          accuracy,\n          altitude,\n          altitudeAccuracy,\n          heading,\n          latitude,\n          longitude,\n          speed,\n          timestamp,\n          error: null\n        });\n\n        if (callback instanceof Function) {\n          callback({\n            accuracy,\n            altitude,\n            altitudeAccuracy,\n            heading,\n            latitude,\n            longitude,\n            speed,\n            timestamp,\n            error: null\n          });\n        }\n      }\n    };\n\n    const setError = error => {\n      if (!didCancel) {\n        updateCoordinates({\n          accuracy: null,\n          altitude: null,\n          altitudeAccuracy: null,\n          heading: null,\n          latitude: null,\n          longitude: null,\n          speed: null,\n          timestamp: null,\n          error\n        });\n      }\n    };\n\n    let watchId;\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(updateCoordinates, setError);\n      watchId = navigator.geolocation.watchPosition(updateCoordinates, setError, {\n        enableHighAccuracy,\n        maximumAge,\n        timeout\n      });\n    }\n\n    return () => {\n      if (watchId) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n\n      didCancel = true;\n    };\n  }, []);\n  return coordinates;\n};\n\nexport default useGeolocation;","map":{"version":3,"sources":["/Users/simonfauvre/Documents/GitHub/P7/node_modules/react-hook-geolocation/dist/index.js"],"names":["useEffect","useState","useGeolocation","enableHighAccuracy","maximumAge","timeout","callback","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","error","coordinates","setCoordinates","didCancel","updateCoordinates","coords","Function","setError","watchId","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useGeolocation = ({\n  enableHighAccuracy,\n  maximumAge,\n  timeout\n} = {}, callback) => {\n  const [coordinates, setCoordinates] = useState({\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: null,\n    error: null\n  });\n  useEffect(() => {\n    let didCancel;\n\n    const updateCoordinates = ({\n      coords = {},\n      timestamp\n    }) => {\n      const {\n        accuracy,\n        altitude,\n        altitudeAccuracy,\n        heading,\n        latitude,\n        longitude,\n        speed\n      } = coords;\n\n      if (!didCancel) {\n        setCoordinates({\n          accuracy,\n          altitude,\n          altitudeAccuracy,\n          heading,\n          latitude,\n          longitude,\n          speed,\n          timestamp,\n          error: null\n        });\n\n        if (callback instanceof Function) {\n          callback({\n            accuracy,\n            altitude,\n            altitudeAccuracy,\n            heading,\n            latitude,\n            longitude,\n            speed,\n            timestamp,\n            error: null\n          });\n        }\n      }\n    };\n\n    const setError = error => {\n      if (!didCancel) {\n        updateCoordinates({\n          accuracy: null,\n          altitude: null,\n          altitudeAccuracy: null,\n          heading: null,\n          latitude: null,\n          longitude: null,\n          speed: null,\n          timestamp: null,\n          error\n        });\n      }\n    };\n\n    let watchId;\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(updateCoordinates, setError);\n      watchId = navigator.geolocation.watchPosition(updateCoordinates, setError, {\n        enableHighAccuracy,\n        maximumAge,\n        timeout\n      });\n    }\n\n    return () => {\n      if (watchId) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n\n      didCancel = true;\n    };\n  }, []);\n  return coordinates;\n};\n\nexport default useGeolocation;"]},"metadata":{},"sourceType":"module"}